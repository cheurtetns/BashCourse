{
  "variable1": "HELP:\nDon't forget the double quotes\nDon't put spaces before and after the '=' sign",
  "variable2": "HELP:\nDon't forget the {} after the $.\nGet all values from an array with @",
  "condition1": "HELP:\nCompare string with '==' or '!='.\nCompare numbers with '-gt', '-ge', '-lt, '-le' or '-eq'",
  "condition2": "HELP:\nDon't forget the inverse ! operator\n",
  "loop1": "HELP:\nUse the @ operator to get all values of list",
  "loop2": "HELP:\nUse regex",
  "loop3": "HELP:\nUse the while command and read line by line the 'min.c' file.\nUse regex to find the line wanted.\nNOTE: It is possibe to find a line in a file with the grep command more easily.",
  "function1": "HELP:\nDon't forget the @ again.\nYou can use the shift argument to difference the array from the integer",
  "1-guess_game": "HELP:\nThe user has to guess the $secret_number value.\nStart using the read command in the while loop to read the input.\nUse the comparison operator for checking the guessed value",
  "2-find_lines": "HELP:\nUse the 'IFS' operator to detect the carriage return.\n Transform the content of the file as a tabular.",
  "1-sed": "HELP:\nPut the command substitution between ''\nDon't forget the 'g' as an option to change every iteration of 'unix'.\nDon't delete the 'd'",
  "2-sed": "HELP:\nJuste use the examples given.\nDon't forget the '' and the d",
  "1-awk": "HELP:\nDon't forget the '' and the // before and after the regex value.",
  "2-awk": "HELP:\nUse the | operator to redirect the output of 'ps -au' to the awk command.\nUse the print command and not the echo command inside the ''.\n To get the wanted column, use the $i to get the ieme corresponding column. The column indices starts at 1.",
  "3-awk": "HELP:\nUse the -F with the : just next to it (no spaces)\nThe users are listed in the first column ",
  "error1": "HELP:\nThe 'set -e' exists  immediately if a pipeline, which may consist of a single simple command, a list, or a compound command returns a non-zero status."
}
